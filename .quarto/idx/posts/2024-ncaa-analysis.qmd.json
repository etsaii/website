{"title":"Statistical Analysis of 2024 Women's College Basketball","markdown":{"yaml":{"title":"Statistical Analysis of 2024 Women's College Basketball","subtitle":" ","date":"5/22/2023","categories":["sports","data"]},"headingText":"Set option to show all columns","containsRefs":false,"markdown":"\n\n```{python}\n#| label: imports\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport matplotlib as mpl\nimport re\n```\n\n```{python}\n#| label: setup-data\n#| include: false\n\npd.set_option('display.max_columns', None)\n\n# Prepare files for dataframe\ndef prepare_df(file_path):\n  df = pd.read_csv(file_path, header=None)\n\n  # Assign new headers\n  new_header = df.iloc[0] + '_' + df.iloc[1]\n  new_header = new_header.str.replace('Totals_', 'Team_')\n  df.columns = new_header\n  df.columns.values[1] = \"School\"\n\n  # Drop the first two rows and the first column\n  df = df.iloc[2:,1:]\n\n  # Drop columns with missing values and fill remaining missing values with 0\n  df = df.dropna(axis=1, how='all').fillna(0)\n\n  return df\n\n# Apply to files\nteam_file_path = \"wcb_files/wcb-school-stats.csv\"\nopponent_file_path = \"wcb_files/wcb-school-opp-stats.csv\"\n\nraw_stats = prepare_df(team_file_path)\nraw_opponent_stats = prepare_df(opponent_file_path)\n\nraw_stats.head()\n```\n\n```{python}\n#| label: create-dataframe\n#| code-fold: true\n\n# Create dataframe for offensive and defensive team stats\nteam_stats = pd.merge(raw_stats, raw_opponent_stats, on=\"School\", how=\"inner\")\nteam_stats.columns = team_stats.columns.str.replace('_x', '')\n\nteam_stats = team_stats[['School', 'Overall_SRS', 'Overall_SOS', 'Overall_W', 'Overall_L',\n                         'Team_FG', 'Team_FGA', 'Team_3P', 'Team_3PA',  'Team_FTA', 'Team_ORB', 'Team_TRB', 'Team_TOV',\n                         'Opponent_FG', 'Opponent_FGA', 'Opponent_3P', 'Opponent_3PA',  'Opponent_FTA', 'Opponent_ORB', 'Opponent_TRB', 'Opponent_TOV']].copy()\n\n# Set datatype\nteam_stats = team_stats.astype({\n    'Overall_SRS': 'float',\n    'Overall_SOS': 'float',\n    'Overall_W': 'int',\n    'Overall_L': 'int'\n})\n\n# Cast all other columns to float\ncast_to_float = team_stats.columns[5:]\nteam_stats[cast_to_float] = team_stats[cast_to_float].astype(float)\n\nteam_stats.dtypes\n\n# Divide teams into SRS percentile\nbins = [0, 0.25, 0.5, 0.8, 1]\nlabels = ['Bottom 25%', '25th-50th %', '50th-80th %', 'Top 20%']\n\nteam_stats['Pct_Group'] = pd.qcut(team_stats['Overall_SRS'], q=bins, labels=labels)\n```\n\n## Statistical Analysis of 2024 Women's College Basketball\n\nUnlike Men's College Basketball, statistical analysis on the Women's game is relatively sparse. Since \"Everybody watches Women's Sports\", I decided to dig into the data\n\n\nAnalysis for the Men's game is widely available and well documented, so I applied some of the most popular methodologies to basic team stats for the Women's game. In this article, I'll focus on calculating:\n\n2. Four Factors\n3. Offensive and Defensive ratings\n\nThese stats, are most commonly used to better understanding the strengths of teams, predict the win probability of matchups, and identify the games that might be most exciting.\n\nThe data used here comes from Sports Reference. While some of the data we be calculating could be pulled directly from Sports Reference's Advance Stats, we still calculate each stats since some of the method may deviate slightly.\n\nTo build a winning March Madness Bracket, we need to know when two teams match up against each other, which team is more likely to win? A popular way to measure this statiscally has been the \"Four Factors of Basketball Success\" from Dean Oliver in his paper \"Basketball on Paper\". Similar to the moneyball of Basketball.\n\n## Four Factors of Basketball\n\nFrom a data analysis perspective, the four factors of success in basketball boils down to:\n\n1. Shooting the ball well: [Effective Field Goal % (eFG%)](eFG%)\n2. Avoiding turnovers: [Turnover %]()\n3. Second changes to score: [Offensive rebound %]()\n4. Getting to the foul line: [Free throw rate](free-throw-rate)\n\nWhile these stats can be found calculated in [Sports Reference's Advanced School Stats](https://www.sports-reference.com/cbb/seasons/women/2024-advanced-school-stats.html), I've chosen to calculated them myself.\n\nIn order for us to measure the offensive and defensive efficiency of each team, we'll first calculate these stats for each team, this is their offense. For defense, we'll calculate how well their opponents do in each of these stats when playing against them.\n\n#### Effective Field Goal % (eFG%) {#sec-eFG%}\n```{python}\n#| label: fg-pct\n#| code-fold: true\n#| output: true\n\n# Calculate both offensive and defensive effective field goal percentage\nteam_stats['Calc_Off_eFG%'] = (team_stats['Team_FG'] + 0.5 * team_stats['Team_3P']) / team_stats['Team_FGA']\nteam_stats['Calc_Def_eFG%'] = (team_stats['Opponent_FG'] + 0.5 * team_stats['Opponent_3P']) / team_stats['Opponent_FGA']\n```\n\nThe effective field goal % captures the teams ability to shoot the ball. Because at the end of the game, the team with the most points wins. If you're not scoring, you can't win. This is calculated as `Field Goals Made + 0.5 * 3-pointers Made) / Field Goals Attempted`. Unlike FG%, this calculation adds 50% more credit for 3-pointers made, since they are worth more points.\n\n\n\n\n#### Offensive Rebound % {#sec-off-reb%}\n```{python}\n#| label: rebound\n#| code-fold: true\n#| output: false\n\n# Create the defensive rebound column\nteam_stats['Team_DRB'] = team_stats['Team_TRB'] - team_stats['Team_ORB']\nteam_stats['Opponent_DRB'] = team_stats['Opponent_TRB'] - team_stats['Opponent_ORB']\n\n# Calculate offensive rebound %\nteam_stats['Calc_ORB%'] = team_stats['Team_ORB'] / (team_stats['Team_ORB'] + team_stats['Opponent_DRB'])\nteam_stats['Calc_Opp_ORB%'] = team_stats['Opponent_ORB'] / (team_stats['Opponent_ORB'] + team_stats['Team_DRB'])\n```\n\n`Offensive Rebounding % = Offensive Rebounds / (Offensive Rebounds + Opponentâ€™s Defensive Rebounds)`\n\n\n\n\n#### Turnover % {#sec-turnover%}\n```{python}\n#| label: turnover\n#| code-fold: true\n#| output: false\n\n# Calculate Pace or Possessions\nteam_stats['Pace'] = team_stats['Team_FGA'] - team_stats['Team_ORB'] + team_stats['Team_TOV'] + (0.475 * team_stats['Team_FTA'] )\n\n# Calculate Turnover %\nteam_stats['Calc_Off_TOV%'] = team_stats['Team_TOV'] / team_stats['Pace']\nteam_stats['Calc_Def_TOV%'] = team_stats['Opponent_TOV'] / team_stats['Pace']\n```\n\n`Turnover % = Turnovers / Possessions`\n\n\n#### Free Throw Rate {#free-throw-rate}\n```{python}\n#| label: ft-rate\n#| code-fold: true\n#| output: false\n\nteam_stats['Calc_Off_FTR'] = team_stats['Team_FTA'] / team_stats['Team_FGA']\nteam_stats['Calc_Def_FTR'] = team_stats['Opponent_FTA'] / team_stats['Opponent_FGA']\n```\n\n`Free Throw Rate = Free Throws Attempts / Field Goal Attempts`\n\n\n#### Relationship of Four Factors with Overall SRS\nOnce each of these metrics has been calculated, let's evaulate the impact each metric has on the overall simple rating system of the team.\n\n```{python}\n#| code-fold: true\n#| column: screen-inset-shaded\n\n# Set up the figure with four subplots\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2x2 grid\n\noff_four_factors = team_stats[['School', 'Overall_SRS', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']]\n\n# List of offensive factors\noffensive_factors = ['Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']\n\n# Loop through the factors and plot each one against 'Overall_SRS'\nfor ax, factor in zip(axes.flatten(), offensive_factors):\n    sns.regplot(\n        data=off_four_factors,\n        x=factor,\n        y='Overall_SRS',\n        ax=ax,\n        scatter_kws={'s': 10},\n        line_kws={'color': 'red', 'linewidth': 0.8}\n    )\n    ax.set_title(f'Relationship between {factor} and Overall_SRS')\n\nplt.suptitle('Impact of Offensive Four Factors on Overall SRS', y=1.02)\nplt.tight_layout()\nplt.show()\n```\n\n\n```{python}\n#| code-fold: true\n\n# Set up the figure with four subplots\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2x2 grid\n\ndef_four_factors = team_stats[['School', 'Overall_SRS', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']]\n\n# List of defensive factors\ndefensive_factors = ['Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']\n\n# Loop through the factors and plot each one against 'Overall_SRS'\nfor ax, factor in zip(axes.flatten(), defensive_factors):\n    sns.regplot(\n        data=def_four_factors,\n        x=factor,\n        y='Overall_SRS',\n        ax=ax,\n        scatter_kws={'s': 10},\n        line_kws={'color': 'red', 'linewidth': 0.8}\n    )\n    ax.set_title(f'Relationship between {factor} and Overall_SRS')\n\nplt.suptitle('Impact of Defensive Four Factors on Overall SRS', y=1.02)\nplt.tight_layout()\nplt.show()\n```\n\n\nIn all calculations, I use per game average since as a basketball fan, it allows me to reason about the data and catch mistakes easier. For example, if free throw attemps is 78, I'm able to recognize and issue witih my data. To increase accuracy calculations could be done on a per game basis before averaged out.\n\n\nSources:\nhttps://kenpom.com/blog/four-factors/\n\n## Offensive & Defensive Efficiency\n\n\n\n```{python}\nteam_stats['Calc_Off_Eff'] = 32.333 + 1.55 * team_stats['Calc_Off_eFG%'] * 100 \\\n                                    + 0.47 * team_stats['Calc_ORB%'] * 100 \\\n                                    - 1.55 * team_stats['Calc_Off_TOV%'] * 100 \\\n                                    + 0.19 * team_stats['Calc_Off_FTR'] * 100\n\nsorted_df = team_stats.sort_values(by='Calc_Off_Eff', ascending=False)\nsorted_df[['School', 'Overall_SRS', 'Calc_Off_Eff', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']].head(10)\n```\n\n```{python}\nteam_stats['Calc_Def_Eff'] = 32.333 + 1.55 * team_stats['Calc_Def_eFG%'] * 100 \\\n                                    + 0.47 * team_stats['Calc_Opp_ORB%'] * 100 \\\n                                    - 1.55 * team_stats['Calc_Def_TOV%']* 100 \\\n                                    + 0.19 * team_stats['Calc_Def_FTR'] * 100\n\nsorted_df = team_stats.sort_values(by='Calc_Def_Eff', ascending=True)\nsorted_df[['School', 'Overall_SRS', 'Calc_Def_Eff', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']].head(10)\n```\n\n```{python}\n#| code-fold: true\n#| column: screen-inset\n#| fig-cap: etsaii\n\ntop_20 = team_stats[team_stats['Pct_Group'] == \"Top 20%\"]\ntop20_4f = top_20[['School', 'Overall_SRS', 'Pace',\n                   'Calc_Off_Eff', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR',\n                   'Calc_Def_Eff', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']].copy()\n\n\nfig, ax = plt.subplots(figsize=(12,12))\n\n# Assign values\nlabels = top20_4f.School\nx = top20_4f.Calc_Off_Eff\ny = top20_4f.Calc_Def_Eff\n\n# Set mean\nax.axvline(x=x.mean(), linestyle='--', color='red')\nax.axhline(y=y.mean(), linestyle='--', color='red')\n\n# Plot data\nfor x0, y0, label in zip(x, y, labels):\n  plt.text(x0, y0, label, fontsize=8, ha='right', va='bottom')\n\nplt.scatter(x, y)\n\n# Add grid\nax.grid(zorder=0, alpha=0.4)\nax.set_axisbelow(True)\n\nax.set_xlim(85, 120)\nax.set_ylim(98, 70)\n\n# Add labels and text\nax.set_xlabel('Adjusted Offensive Efficiency')\nax.set_ylabel('Adjusted Defensive Efficiency')\n\nax.text(0.99, 0.01, 'Better Offense\\nWorst Defense',\n        verticalalignment='bottom', horizontalalignment='right',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.99, 0.99, 'Better Offense\\nBetter Defense',\n        verticalalignment='top', horizontalalignment='right',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.01, 0.99, 'Worst Offense\\nBetter Defense',\n        verticalalignment='top', horizontalalignment='left',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.01, 0.01, 'Worst Offense\\nWorst Defense',\n        verticalalignment='bottom', horizontalalignment='left',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.set_title('2024 Women\\'s NCAA Basketball Tiers')\n\n```\n\n\n\n### Relationship of Four Factors\n\nOnce we have all four factors calculated, both for offense and defense, we can see how each factor impacts their SRS rating.\n\n\n\nIn many of the analysis, we'll also compare Sports Reference's Simple Rating System (SRS) with the stats that we calculate. The Overall SRS, \"takes into account average point differential and strength of schedule\", where zero is average and a high positive number signals a strong team.\n\nData Sources:\nSports Reference: https://www.sports-reference.com/cbb/seasons/women/2024-ratings.html\nMassey Rating: https://masseyratings.com/cbw/ncaa-d1/ratings\nSokolâ€™s LRMC ratings: https://www2.isye.gatech.edu/~jsokol/lrmcW/\nMooreâ€™s ratings: https://sonnymoorepowerratings.com/w-basket.htm","srcMarkdownNoYaml":"\n\n```{python}\n#| label: imports\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport matplotlib as mpl\nimport re\n```\n\n```{python}\n#| label: setup-data\n#| include: false\n\n# Set option to show all columns\npd.set_option('display.max_columns', None)\n\n# Prepare files for dataframe\ndef prepare_df(file_path):\n  df = pd.read_csv(file_path, header=None)\n\n  # Assign new headers\n  new_header = df.iloc[0] + '_' + df.iloc[1]\n  new_header = new_header.str.replace('Totals_', 'Team_')\n  df.columns = new_header\n  df.columns.values[1] = \"School\"\n\n  # Drop the first two rows and the first column\n  df = df.iloc[2:,1:]\n\n  # Drop columns with missing values and fill remaining missing values with 0\n  df = df.dropna(axis=1, how='all').fillna(0)\n\n  return df\n\n# Apply to files\nteam_file_path = \"wcb_files/wcb-school-stats.csv\"\nopponent_file_path = \"wcb_files/wcb-school-opp-stats.csv\"\n\nraw_stats = prepare_df(team_file_path)\nraw_opponent_stats = prepare_df(opponent_file_path)\n\nraw_stats.head()\n```\n\n```{python}\n#| label: create-dataframe\n#| code-fold: true\n\n# Create dataframe for offensive and defensive team stats\nteam_stats = pd.merge(raw_stats, raw_opponent_stats, on=\"School\", how=\"inner\")\nteam_stats.columns = team_stats.columns.str.replace('_x', '')\n\nteam_stats = team_stats[['School', 'Overall_SRS', 'Overall_SOS', 'Overall_W', 'Overall_L',\n                         'Team_FG', 'Team_FGA', 'Team_3P', 'Team_3PA',  'Team_FTA', 'Team_ORB', 'Team_TRB', 'Team_TOV',\n                         'Opponent_FG', 'Opponent_FGA', 'Opponent_3P', 'Opponent_3PA',  'Opponent_FTA', 'Opponent_ORB', 'Opponent_TRB', 'Opponent_TOV']].copy()\n\n# Set datatype\nteam_stats = team_stats.astype({\n    'Overall_SRS': 'float',\n    'Overall_SOS': 'float',\n    'Overall_W': 'int',\n    'Overall_L': 'int'\n})\n\n# Cast all other columns to float\ncast_to_float = team_stats.columns[5:]\nteam_stats[cast_to_float] = team_stats[cast_to_float].astype(float)\n\nteam_stats.dtypes\n\n# Divide teams into SRS percentile\nbins = [0, 0.25, 0.5, 0.8, 1]\nlabels = ['Bottom 25%', '25th-50th %', '50th-80th %', 'Top 20%']\n\nteam_stats['Pct_Group'] = pd.qcut(team_stats['Overall_SRS'], q=bins, labels=labels)\n```\n\n## Statistical Analysis of 2024 Women's College Basketball\n\nUnlike Men's College Basketball, statistical analysis on the Women's game is relatively sparse. Since \"Everybody watches Women's Sports\", I decided to dig into the data\n\n\nAnalysis for the Men's game is widely available and well documented, so I applied some of the most popular methodologies to basic team stats for the Women's game. In this article, I'll focus on calculating:\n\n2. Four Factors\n3. Offensive and Defensive ratings\n\nThese stats, are most commonly used to better understanding the strengths of teams, predict the win probability of matchups, and identify the games that might be most exciting.\n\nThe data used here comes from Sports Reference. While some of the data we be calculating could be pulled directly from Sports Reference's Advance Stats, we still calculate each stats since some of the method may deviate slightly.\n\nTo build a winning March Madness Bracket, we need to know when two teams match up against each other, which team is more likely to win? A popular way to measure this statiscally has been the \"Four Factors of Basketball Success\" from Dean Oliver in his paper \"Basketball on Paper\". Similar to the moneyball of Basketball.\n\n## Four Factors of Basketball\n\nFrom a data analysis perspective, the four factors of success in basketball boils down to:\n\n1. Shooting the ball well: [Effective Field Goal % (eFG%)](eFG%)\n2. Avoiding turnovers: [Turnover %]()\n3. Second changes to score: [Offensive rebound %]()\n4. Getting to the foul line: [Free throw rate](free-throw-rate)\n\nWhile these stats can be found calculated in [Sports Reference's Advanced School Stats](https://www.sports-reference.com/cbb/seasons/women/2024-advanced-school-stats.html), I've chosen to calculated them myself.\n\nIn order for us to measure the offensive and defensive efficiency of each team, we'll first calculate these stats for each team, this is their offense. For defense, we'll calculate how well their opponents do in each of these stats when playing against them.\n\n#### Effective Field Goal % (eFG%) {#sec-eFG%}\n```{python}\n#| label: fg-pct\n#| code-fold: true\n#| output: true\n\n# Calculate both offensive and defensive effective field goal percentage\nteam_stats['Calc_Off_eFG%'] = (team_stats['Team_FG'] + 0.5 * team_stats['Team_3P']) / team_stats['Team_FGA']\nteam_stats['Calc_Def_eFG%'] = (team_stats['Opponent_FG'] + 0.5 * team_stats['Opponent_3P']) / team_stats['Opponent_FGA']\n```\n\nThe effective field goal % captures the teams ability to shoot the ball. Because at the end of the game, the team with the most points wins. If you're not scoring, you can't win. This is calculated as `Field Goals Made + 0.5 * 3-pointers Made) / Field Goals Attempted`. Unlike FG%, this calculation adds 50% more credit for 3-pointers made, since they are worth more points.\n\n\n\n\n#### Offensive Rebound % {#sec-off-reb%}\n```{python}\n#| label: rebound\n#| code-fold: true\n#| output: false\n\n# Create the defensive rebound column\nteam_stats['Team_DRB'] = team_stats['Team_TRB'] - team_stats['Team_ORB']\nteam_stats['Opponent_DRB'] = team_stats['Opponent_TRB'] - team_stats['Opponent_ORB']\n\n# Calculate offensive rebound %\nteam_stats['Calc_ORB%'] = team_stats['Team_ORB'] / (team_stats['Team_ORB'] + team_stats['Opponent_DRB'])\nteam_stats['Calc_Opp_ORB%'] = team_stats['Opponent_ORB'] / (team_stats['Opponent_ORB'] + team_stats['Team_DRB'])\n```\n\n`Offensive Rebounding % = Offensive Rebounds / (Offensive Rebounds + Opponentâ€™s Defensive Rebounds)`\n\n\n\n\n#### Turnover % {#sec-turnover%}\n```{python}\n#| label: turnover\n#| code-fold: true\n#| output: false\n\n# Calculate Pace or Possessions\nteam_stats['Pace'] = team_stats['Team_FGA'] - team_stats['Team_ORB'] + team_stats['Team_TOV'] + (0.475 * team_stats['Team_FTA'] )\n\n# Calculate Turnover %\nteam_stats['Calc_Off_TOV%'] = team_stats['Team_TOV'] / team_stats['Pace']\nteam_stats['Calc_Def_TOV%'] = team_stats['Opponent_TOV'] / team_stats['Pace']\n```\n\n`Turnover % = Turnovers / Possessions`\n\n\n#### Free Throw Rate {#free-throw-rate}\n```{python}\n#| label: ft-rate\n#| code-fold: true\n#| output: false\n\nteam_stats['Calc_Off_FTR'] = team_stats['Team_FTA'] / team_stats['Team_FGA']\nteam_stats['Calc_Def_FTR'] = team_stats['Opponent_FTA'] / team_stats['Opponent_FGA']\n```\n\n`Free Throw Rate = Free Throws Attempts / Field Goal Attempts`\n\n\n#### Relationship of Four Factors with Overall SRS\nOnce each of these metrics has been calculated, let's evaulate the impact each metric has on the overall simple rating system of the team.\n\n```{python}\n#| code-fold: true\n#| column: screen-inset-shaded\n\n# Set up the figure with four subplots\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2x2 grid\n\noff_four_factors = team_stats[['School', 'Overall_SRS', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']]\n\n# List of offensive factors\noffensive_factors = ['Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']\n\n# Loop through the factors and plot each one against 'Overall_SRS'\nfor ax, factor in zip(axes.flatten(), offensive_factors):\n    sns.regplot(\n        data=off_four_factors,\n        x=factor,\n        y='Overall_SRS',\n        ax=ax,\n        scatter_kws={'s': 10},\n        line_kws={'color': 'red', 'linewidth': 0.8}\n    )\n    ax.set_title(f'Relationship between {factor} and Overall_SRS')\n\nplt.suptitle('Impact of Offensive Four Factors on Overall SRS', y=1.02)\nplt.tight_layout()\nplt.show()\n```\n\n\n```{python}\n#| code-fold: true\n\n# Set up the figure with four subplots\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2x2 grid\n\ndef_four_factors = team_stats[['School', 'Overall_SRS', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']]\n\n# List of defensive factors\ndefensive_factors = ['Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']\n\n# Loop through the factors and plot each one against 'Overall_SRS'\nfor ax, factor in zip(axes.flatten(), defensive_factors):\n    sns.regplot(\n        data=def_four_factors,\n        x=factor,\n        y='Overall_SRS',\n        ax=ax,\n        scatter_kws={'s': 10},\n        line_kws={'color': 'red', 'linewidth': 0.8}\n    )\n    ax.set_title(f'Relationship between {factor} and Overall_SRS')\n\nplt.suptitle('Impact of Defensive Four Factors on Overall SRS', y=1.02)\nplt.tight_layout()\nplt.show()\n```\n\n\nIn all calculations, I use per game average since as a basketball fan, it allows me to reason about the data and catch mistakes easier. For example, if free throw attemps is 78, I'm able to recognize and issue witih my data. To increase accuracy calculations could be done on a per game basis before averaged out.\n\n\nSources:\nhttps://kenpom.com/blog/four-factors/\n\n## Offensive & Defensive Efficiency\n\n\n\n```{python}\nteam_stats['Calc_Off_Eff'] = 32.333 + 1.55 * team_stats['Calc_Off_eFG%'] * 100 \\\n                                    + 0.47 * team_stats['Calc_ORB%'] * 100 \\\n                                    - 1.55 * team_stats['Calc_Off_TOV%'] * 100 \\\n                                    + 0.19 * team_stats['Calc_Off_FTR'] * 100\n\nsorted_df = team_stats.sort_values(by='Calc_Off_Eff', ascending=False)\nsorted_df[['School', 'Overall_SRS', 'Calc_Off_Eff', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR']].head(10)\n```\n\n```{python}\nteam_stats['Calc_Def_Eff'] = 32.333 + 1.55 * team_stats['Calc_Def_eFG%'] * 100 \\\n                                    + 0.47 * team_stats['Calc_Opp_ORB%'] * 100 \\\n                                    - 1.55 * team_stats['Calc_Def_TOV%']* 100 \\\n                                    + 0.19 * team_stats['Calc_Def_FTR'] * 100\n\nsorted_df = team_stats.sort_values(by='Calc_Def_Eff', ascending=True)\nsorted_df[['School', 'Overall_SRS', 'Calc_Def_Eff', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']].head(10)\n```\n\n```{python}\n#| code-fold: true\n#| column: screen-inset\n#| fig-cap: etsaii\n\ntop_20 = team_stats[team_stats['Pct_Group'] == \"Top 20%\"]\ntop20_4f = top_20[['School', 'Overall_SRS', 'Pace',\n                   'Calc_Off_Eff', 'Calc_Off_eFG%', 'Calc_ORB%', 'Calc_Off_TOV%', 'Calc_Off_FTR',\n                   'Calc_Def_Eff', 'Calc_Def_eFG%', 'Calc_Opp_ORB%', 'Calc_Def_TOV%', 'Calc_Def_FTR']].copy()\n\n\nfig, ax = plt.subplots(figsize=(12,12))\n\n# Assign values\nlabels = top20_4f.School\nx = top20_4f.Calc_Off_Eff\ny = top20_4f.Calc_Def_Eff\n\n# Set mean\nax.axvline(x=x.mean(), linestyle='--', color='red')\nax.axhline(y=y.mean(), linestyle='--', color='red')\n\n# Plot data\nfor x0, y0, label in zip(x, y, labels):\n  plt.text(x0, y0, label, fontsize=8, ha='right', va='bottom')\n\nplt.scatter(x, y)\n\n# Add grid\nax.grid(zorder=0, alpha=0.4)\nax.set_axisbelow(True)\n\nax.set_xlim(85, 120)\nax.set_ylim(98, 70)\n\n# Add labels and text\nax.set_xlabel('Adjusted Offensive Efficiency')\nax.set_ylabel('Adjusted Defensive Efficiency')\n\nax.text(0.99, 0.01, 'Better Offense\\nWorst Defense',\n        verticalalignment='bottom', horizontalalignment='right',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.99, 0.99, 'Better Offense\\nBetter Defense',\n        verticalalignment='top', horizontalalignment='right',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.01, 0.99, 'Worst Offense\\nBetter Defense',\n        verticalalignment='top', horizontalalignment='left',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.text(0.01, 0.01, 'Worst Offense\\nWorst Defense',\n        verticalalignment='bottom', horizontalalignment='left',\n        transform=ax.transAxes,\n        color='green', fontsize=12)\n\nax.set_title('2024 Women\\'s NCAA Basketball Tiers')\n\n```\n\n\n\n### Relationship of Four Factors\n\nOnce we have all four factors calculated, both for offense and defense, we can see how each factor impacts their SRS rating.\n\n\n\nIn many of the analysis, we'll also compare Sports Reference's Simple Rating System (SRS) with the stats that we calculate. The Overall SRS, \"takes into account average point differential and strength of schedule\", where zero is average and a high positive number signals a strong team.\n\nData Sources:\nSports Reference: https://www.sports-reference.com/cbb/seasons/women/2024-ratings.html\nMassey Rating: https://masseyratings.com/cbw/ncaa-d1/ratings\nSokolâ€™s LRMC ratings: https://www2.isye.gatech.edu/~jsokol/lrmcW/\nMooreâ€™s ratings: https://sonnymoorepowerratings.com/w-basket.htm"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":false,"output-file":"2024-ncaa-analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"flatly","title":"Statistical Analysis of 2024 Women's College Basketball","subtitle":" ","date":"5/22/2023","categories":["sports","data"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}